// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"entproject/ent/predicate"
	"entproject/ent/service"
	"entproject/ent/serviceversion"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ServiceVersionUpdate is the builder for updating ServiceVersion entities.
type ServiceVersionUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceVersionMutation
}

// Where appends a list predicates to the ServiceVersionUpdate builder.
func (svu *ServiceVersionUpdate) Where(ps ...predicate.ServiceVersion) *ServiceVersionUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetVersion sets the "version" field.
func (svu *ServiceVersionUpdate) SetVersion(i int) *ServiceVersionUpdate {
	svu.mutation.ResetVersion()
	svu.mutation.SetVersion(i)
	return svu
}

// AddVersion adds i to the "version" field.
func (svu *ServiceVersionUpdate) AddVersion(i int) *ServiceVersionUpdate {
	svu.mutation.AddVersion(i)
	return svu
}

// SetConfig sets the "config" field.
func (svu *ServiceVersionUpdate) SetConfig(s string) *ServiceVersionUpdate {
	svu.mutation.SetConfig(s)
	return svu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (svu *ServiceVersionUpdate) SetServiceID(id uuid.UUID) *ServiceVersionUpdate {
	svu.mutation.SetServiceID(id)
	return svu
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (svu *ServiceVersionUpdate) SetNillableServiceID(id *uuid.UUID) *ServiceVersionUpdate {
	if id != nil {
		svu = svu.SetServiceID(*id)
	}
	return svu
}

// SetService sets the "service" edge to the Service entity.
func (svu *ServiceVersionUpdate) SetService(s *Service) *ServiceVersionUpdate {
	return svu.SetServiceID(s.ID)
}

// Mutation returns the ServiceVersionMutation object of the builder.
func (svu *ServiceVersionUpdate) Mutation() *ServiceVersionMutation {
	return svu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (svu *ServiceVersionUpdate) ClearService() *ServiceVersionUpdate {
	svu.mutation.ClearService()
	return svu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *ServiceVersionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(svu.hooks) == 0 {
		affected, err = svu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			svu.mutation = mutation
			affected, err = svu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(svu.hooks) - 1; i >= 0; i-- {
			if svu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = svu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, svu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (svu *ServiceVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *ServiceVersionUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *ServiceVersionUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (svu *ServiceVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   serviceversion.Table,
			Columns: serviceversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: serviceversion.FieldID,
			},
		},
	}
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceversion.FieldVersion,
		})
	}
	if value, ok := svu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceversion.FieldVersion,
		})
	}
	if value, ok := svu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceversion.FieldConfig,
		})
	}
	if svu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceversion.ServiceTable,
			Columns: []string{serviceversion.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceversion.ServiceTable,
			Columns: []string{serviceversion.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ServiceVersionUpdateOne is the builder for updating a single ServiceVersion entity.
type ServiceVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceVersionMutation
}

// SetVersion sets the "version" field.
func (svuo *ServiceVersionUpdateOne) SetVersion(i int) *ServiceVersionUpdateOne {
	svuo.mutation.ResetVersion()
	svuo.mutation.SetVersion(i)
	return svuo
}

// AddVersion adds i to the "version" field.
func (svuo *ServiceVersionUpdateOne) AddVersion(i int) *ServiceVersionUpdateOne {
	svuo.mutation.AddVersion(i)
	return svuo
}

// SetConfig sets the "config" field.
func (svuo *ServiceVersionUpdateOne) SetConfig(s string) *ServiceVersionUpdateOne {
	svuo.mutation.SetConfig(s)
	return svuo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (svuo *ServiceVersionUpdateOne) SetServiceID(id uuid.UUID) *ServiceVersionUpdateOne {
	svuo.mutation.SetServiceID(id)
	return svuo
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (svuo *ServiceVersionUpdateOne) SetNillableServiceID(id *uuid.UUID) *ServiceVersionUpdateOne {
	if id != nil {
		svuo = svuo.SetServiceID(*id)
	}
	return svuo
}

// SetService sets the "service" edge to the Service entity.
func (svuo *ServiceVersionUpdateOne) SetService(s *Service) *ServiceVersionUpdateOne {
	return svuo.SetServiceID(s.ID)
}

// Mutation returns the ServiceVersionMutation object of the builder.
func (svuo *ServiceVersionUpdateOne) Mutation() *ServiceVersionMutation {
	return svuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (svuo *ServiceVersionUpdateOne) ClearService() *ServiceVersionUpdateOne {
	svuo.mutation.ClearService()
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *ServiceVersionUpdateOne) Select(field string, fields ...string) *ServiceVersionUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated ServiceVersion entity.
func (svuo *ServiceVersionUpdateOne) Save(ctx context.Context) (*ServiceVersion, error) {
	var (
		err  error
		node *ServiceVersion
	)
	if len(svuo.hooks) == 0 {
		node, err = svuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			svuo.mutation = mutation
			node, err = svuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(svuo.hooks) - 1; i >= 0; i-- {
			if svuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = svuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, svuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *ServiceVersionUpdateOne) SaveX(ctx context.Context) *ServiceVersion {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *ServiceVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *ServiceVersionUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (svuo *ServiceVersionUpdateOne) sqlSave(ctx context.Context) (_node *ServiceVersion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   serviceversion.Table,
			Columns: serviceversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: serviceversion.FieldID,
			},
		},
	}
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceversion.FieldID)
		for _, f := range fields {
			if !serviceversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceversion.FieldVersion,
		})
	}
	if value, ok := svuo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceversion.FieldVersion,
		})
	}
	if value, ok := svuo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceversion.FieldConfig,
		})
	}
	if svuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceversion.ServiceTable,
			Columns: []string{serviceversion.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceversion.ServiceTable,
			Columns: []string{serviceversion.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceVersion{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
