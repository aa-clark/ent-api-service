// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"entproject/ent/migrate"

	"entproject/ent/service"
	"entproject/ent/serviceversion"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Service is the client for interacting with the Service builders.
	Service *ServiceClient
	// ServiceVersion is the client for interacting with the ServiceVersion builders.
	ServiceVersion *ServiceVersionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Service = NewServiceClient(c.config)
	c.ServiceVersion = NewServiceVersionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Service:        NewServiceClient(cfg),
		ServiceVersion: NewServiceVersionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Service:        NewServiceClient(cfg),
		ServiceVersion: NewServiceVersionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Service.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Service.Use(hooks...)
	c.ServiceVersion.Use(hooks...)
}

// ServiceClient is a client for the Service schema.
type ServiceClient struct {
	config
}

// NewServiceClient returns a client for the Service from the given config.
func NewServiceClient(c config) *ServiceClient {
	return &ServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `service.Hooks(f(g(h())))`.
func (c *ServiceClient) Use(hooks ...Hook) {
	c.hooks.Service = append(c.hooks.Service, hooks...)
}

// Create returns a create builder for Service.
func (c *ServiceClient) Create() *ServiceCreate {
	mutation := newServiceMutation(c.config, OpCreate)
	return &ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Service entities.
func (c *ServiceClient) CreateBulk(builders ...*ServiceCreate) *ServiceCreateBulk {
	return &ServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Service.
func (c *ServiceClient) Update() *ServiceUpdate {
	mutation := newServiceMutation(c.config, OpUpdate)
	return &ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceClient) UpdateOne(s *Service) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withService(s))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceClient) UpdateOneID(id uuid.UUID) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withServiceID(id))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Service.
func (c *ServiceClient) Delete() *ServiceDelete {
	mutation := newServiceMutation(c.config, OpDelete)
	return &ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServiceClient) DeleteOne(s *Service) *ServiceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServiceClient) DeleteOneID(id uuid.UUID) *ServiceDeleteOne {
	builder := c.Delete().Where(service.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceDeleteOne{builder}
}

// Query returns a query builder for Service.
func (c *ServiceClient) Query() *ServiceQuery {
	return &ServiceQuery{
		config: c.config,
	}
}

// Get returns a Service entity by its id.
func (c *ServiceClient) Get(ctx context.Context, id uuid.UUID) (*Service, error) {
	return c.Query().Where(service.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceClient) GetX(ctx context.Context, id uuid.UUID) *Service {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServiceVersions queries the serviceVersions edge of a Service.
func (c *ServiceClient) QueryServiceVersions(s *Service) *ServiceVersionQuery {
	query := &ServiceVersionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(serviceversion.Table, serviceversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, service.ServiceVersionsTable, service.ServiceVersionsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceClient) Hooks() []Hook {
	return c.hooks.Service
}

// ServiceVersionClient is a client for the ServiceVersion schema.
type ServiceVersionClient struct {
	config
}

// NewServiceVersionClient returns a client for the ServiceVersion from the given config.
func NewServiceVersionClient(c config) *ServiceVersionClient {
	return &ServiceVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serviceversion.Hooks(f(g(h())))`.
func (c *ServiceVersionClient) Use(hooks ...Hook) {
	c.hooks.ServiceVersion = append(c.hooks.ServiceVersion, hooks...)
}

// Create returns a create builder for ServiceVersion.
func (c *ServiceVersionClient) Create() *ServiceVersionCreate {
	mutation := newServiceVersionMutation(c.config, OpCreate)
	return &ServiceVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceVersion entities.
func (c *ServiceVersionClient) CreateBulk(builders ...*ServiceVersionCreate) *ServiceVersionCreateBulk {
	return &ServiceVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceVersion.
func (c *ServiceVersionClient) Update() *ServiceVersionUpdate {
	mutation := newServiceVersionMutation(c.config, OpUpdate)
	return &ServiceVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceVersionClient) UpdateOne(sv *ServiceVersion) *ServiceVersionUpdateOne {
	mutation := newServiceVersionMutation(c.config, OpUpdateOne, withServiceVersion(sv))
	return &ServiceVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceVersionClient) UpdateOneID(id int) *ServiceVersionUpdateOne {
	mutation := newServiceVersionMutation(c.config, OpUpdateOne, withServiceVersionID(id))
	return &ServiceVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceVersion.
func (c *ServiceVersionClient) Delete() *ServiceVersionDelete {
	mutation := newServiceVersionMutation(c.config, OpDelete)
	return &ServiceVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServiceVersionClient) DeleteOne(sv *ServiceVersion) *ServiceVersionDeleteOne {
	return c.DeleteOneID(sv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServiceVersionClient) DeleteOneID(id int) *ServiceVersionDeleteOne {
	builder := c.Delete().Where(serviceversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceVersionDeleteOne{builder}
}

// Query returns a query builder for ServiceVersion.
func (c *ServiceVersionClient) Query() *ServiceVersionQuery {
	return &ServiceVersionQuery{
		config: c.config,
	}
}

// Get returns a ServiceVersion entity by its id.
func (c *ServiceVersionClient) Get(ctx context.Context, id int) (*ServiceVersion, error) {
	return c.Query().Where(serviceversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceVersionClient) GetX(ctx context.Context, id int) *ServiceVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryService queries the service edge of a ServiceVersion.
func (c *ServiceVersionClient) QueryService(sv *ServiceVersion) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceversion.Table, serviceversion.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceversion.ServiceTable, serviceversion.ServiceColumn),
		)
		fromV = sqlgraph.Neighbors(sv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceVersionClient) Hooks() []Hook {
	return c.hooks.ServiceVersion
}
