// Code generated by entc, DO NOT EDIT.

package serviceversion

const (
	// Label holds the string label denoting the serviceversion type in the database.
	Label = "service_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// ServiceFieldID holds the string denoting the ID field of the Service.
	ServiceFieldID = "oid"
	// Table holds the table name of the serviceversion in the database.
	Table = "service_versions"
	// ServiceTable is the table that holds the service relation/edge.
	ServiceTable = "service_versions"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_service_versions"
)

// Columns holds all SQL columns for serviceversion fields.
var Columns = []string{
	FieldID,
	FieldVersion,
	FieldConfig,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "service_versions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"service_service_versions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
